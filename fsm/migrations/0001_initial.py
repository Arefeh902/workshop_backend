# Generated by Django 3.0.4 on 2021-05-30 09:29

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_type', models.CharField(default='Answer', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('cover_page', models.ImageField(blank=True, null=True, upload_to='workshop/')),
                ('active', models.BooleanField(default=False)),
                ('event_cost', models.IntegerField(default=0)),
                ('event_team_cost', models.IntegerField(default=0)),
                ('event_type', models.CharField(choices=[('team', 'Team'), ('individual', 'Individual')], default='individual', max_length=40)),
                ('has_selection', models.BooleanField(default=False)),
                ('team_size', models.IntegerField(default=3)),
                ('maximum_participant', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FSM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('cover_page', models.ImageField(blank=True, null=True, upload_to='workshop/')),
                ('active', models.BooleanField(default=False)),
                ('fsm_learning_type', models.CharField(choices=[('withMentor', 'Withmentor'), ('noMentor', 'Nomentor')], default='noMentor', max_length=40)),
                ('fsm_p_type', models.CharField(choices=[('team', 'Team'), ('individual', 'Individual'), ('hybrid', 'Hybrid')], default='individual', max_length=40)),
                ('lock', models.CharField(blank=True, max_length=10, null=True)),
                ('event', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fsm.Event')),
            ],
        ),
        migrations.CreateModel(
            name='FSMEdge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_back_enabled', models.BooleanField(default=True)),
                ('min_score', models.FloatField(default=0.0)),
                ('cost', models.FloatField(default=0.0)),
                ('priority', models.IntegerField()),
                ('lock', models.CharField(blank=True, max_length=10, null=True)),
                ('has_lock', models.BooleanField(default=False)),
                ('text', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FSMState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Widget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.IntegerField(blank=True, default=1, null=True)),
                ('widget_type', models.CharField(choices=[('Game', 'Game'), ('Video', 'Video'), ('Image', 'Image'), ('Description', 'Description'), ('ProblemSmallAnswer', 'Problemsmallanswer'), ('ProblemBigAnswer', 'Problembiganswer'), ('ProblemMultiChoice', 'Problemmultichoice'), ('ProblemUploadFileAnswer', 'Problemuploadfileanswer')], max_length=30)),
                ('state', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='widget', to='fsm.FSMState')),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('fsmstate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.FSMState')),
                ('description', models.TextField(blank=True, null=True)),
                ('cover_page', models.ImageField(blank=True, null=True, upload_to='workshop/')),
                ('active', models.BooleanField(default=False)),
            ],
            bases=('fsm.fsmstate',),
        ),
        migrations.CreateModel(
            name='Description',
            fields=[
                ('widget_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.Widget')),
                ('text', models.TextField()),
            ],
            bases=('fsm.widget',),
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('widget_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.Widget')),
                ('name', models.CharField(max_length=100, null=True)),
                ('link', models.TextField()),
            ],
            bases=('fsm.widget',),
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('widget_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.Widget')),
                ('name', models.CharField(max_length=100, null=True)),
                ('link', models.TextField()),
            ],
            bases=('fsm.widget',),
        ),
        migrations.CreateModel(
            name='MainState',
            fields=[
                ('fsmstate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.FSMState')),
                ('fsm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='states', to='fsm.FSM')),
            ],
            bases=('fsm.fsmstate',),
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('widget_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.Widget')),
                ('name', models.CharField(max_length=100, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('max_score', models.FloatField(blank=True, null=True)),
            ],
            bases=('fsm.widget',),
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('widget_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.Widget')),
                ('name', models.CharField(max_length=100, null=True)),
                ('link', models.TextField()),
            ],
            bases=('fsm.widget',),
        ),
        migrations.CreateModel(
            name='PlayerWorkshop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_visit', models.DateTimeField(blank=True, null=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_workshop', to='accounts.Player')),
                ('workshop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_workshop', to='fsm.FSM')),
                ('current_state', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='player_workshop', to='fsm.MainState')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('inward_edge', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fsm.FSMEdge')),
                ('player_workshop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='histories', to='fsm.PlayerWorkshop')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_histories', to='fsm.MainState')),
            ],
        ),
        migrations.CreateModel(
            name='Ability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('value', models.BooleanField()),
                ('edge', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abilities', to='fsm.FSMEdge')),
                ('player_history', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abilities', to='fsm.PlayerHistory')),
            ],
        ),
        migrations.CreateModel(
            name='ProblemBigAnswer',
            fields=[
                ('problem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.Problem')),
            ],
            bases=('fsm.problem',),
        ),
        migrations.CreateModel(
            name='ProblemMultiChoice',
            fields=[
                ('problem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.Problem')),
            ],
            bases=('fsm.problem',),
        ),
        migrations.CreateModel(
            name='ProblemSmallAnswer',
            fields=[
                ('problem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.Problem')),
            ],
            bases=('fsm.problem',),
        ),
        migrations.CreateModel(
            name='ProblemUploadFileAnswer',
            fields=[
                ('problem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.Problem')),
            ],
            bases=('fsm.problem',),
        ),
        migrations.CreateModel(
            name='SubmittedAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publish_date', models.DateTimeField(blank=True, null=True)),
                ('answer', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='fsm.Answer')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submitted_answers', to='accounts.Player')),
                ('problem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submitted_answers', to='fsm.Problem')),
            ],
        ),
        migrations.CreateModel(
            name='HelpState',
            fields=[
                ('fsmstate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.FSMState')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='help_states', to='fsm.MainState')),
            ],
            bases=('fsm.fsmstate',),
        ),
        migrations.AddField(
            model_name='fsmedge',
            name='head',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inward_edges', to='fsm.MainState'),
        ),
        migrations.AddField(
            model_name='fsmedge',
            name='tail',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outward_edges', to='fsm.MainState'),
        ),
        migrations.AddField(
            model_name='fsm',
            name='first_state',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='my_fsm', to='fsm.MainState'),
        ),
        migrations.CreateModel(
            name='UploadFileAnswer',
            fields=[
                ('answer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.Answer')),
                ('answer_file', models.FileField(max_length=4000, upload_to='AnswerFile')),
                ('file_name', models.CharField(max_length=50)),
                ('problem', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answer', to='fsm.ProblemUploadFileAnswer')),
            ],
            bases=('fsm.answer',),
        ),
        migrations.CreateModel(
            name='SmallAnswer',
            fields=[
                ('answer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.Answer')),
                ('text', models.TextField()),
                ('problem', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answer', to='fsm.ProblemSmallAnswer')),
            ],
            bases=('fsm.answer',),
        ),
        migrations.CreateModel(
            name='MultiChoiceAnswer',
            fields=[
                ('answer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.Answer')),
                ('text', models.IntegerField()),
                ('problem', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answer', to='fsm.ProblemMultiChoice')),
            ],
            bases=('fsm.answer',),
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('problem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='fsm.ProblemMultiChoice')),
            ],
        ),
        migrations.CreateModel(
            name='BigAnswer',
            fields=[
                ('answer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.Answer')),
                ('text', models.TextField()),
                ('problem', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answer', to='fsm.ProblemBigAnswer')),
            ],
            bases=('fsm.answer',),
        ),
    ]

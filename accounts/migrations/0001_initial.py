# Generated by Django 3.0.4 on 2021-05-30 09:29

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('city', models.CharField(blank=True, max_length=20, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Man', 'Man'), ('Woman', 'Woman')], max_length=10, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DiscountCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=10)),
                ('value', models.FloatField()),
                ('expiration_date', models.DateTimeField(blank=True, null=True)),
                ('is_valid', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventOwner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('is_participant', models.BooleanField(default=True)),
                ('is_mentor', models.BooleanField(default=False)),
                ('is_event_owner', models.BooleanField(default=False)),
                ('first_name', models.CharField(blank=True, max_length=15, null=True)),
                ('last_name', models.CharField(blank=True, max_length=15, null=True)),
                ('email', models.CharField(blank=True, max_length=15, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('school', models.CharField(blank=True, max_length=50, null=True)),
                ('city', models.CharField(blank=True, max_length=20, null=True)),
                ('document', models.FileField(blank=True, null=True, upload_to='documents/')),
                ('gender', models.CharField(blank=True, choices=[('Man', 'Man'), ('Woman', 'Woman')], max_length=10, null=True)),
                ('grade', models.CharField(blank=True, choices=[('پیش\u200c از دبستان', 'Pre'), ('اول', 'One'), ('دوم', 'Two'), ('سوم', 'Three'), ('چهارم', 'Four'), ('پنچم', 'Five'), ('ششم', 'Six'), ('هفتم', 'Seven'), ('هشتم', 'Eight'), ('نهم', 'Nine'), ('دهم', 'Ten'), ('یازدهم', 'Eleven'), ('دوازدهم', 'Twelve')], max_length=15, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
            ],
            options={
                'db_table': 'auth_user',
            },
        ),
        migrations.CreateModel(
            name='Mentor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref_id', models.CharField(blank=True, max_length=100, null=True)),
                ('amount', models.IntegerField()),
                ('authority', models.CharField(blank=True, max_length=37, null=True)),
                ('status', models.CharField(choices=[('SUCCESS', 'SUCCESS'), ('REPETITIOUS', 'REPETITIOUS'), ('FAILED', 'FAILED'), ('STARTED', 'STARTED')], max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('uniq_code', models.CharField(default='', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_type', models.CharField(choices=[('TEAM', 'Team'), ('PARTICIPANT', 'Participant')], max_length=15)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='VerifyCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=13, null=True)),
                ('code', models.CharField(blank=True, max_length=10, null=True)),
                ('expiration_date', models.DateTimeField()),
                ('is_valid', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('player_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='accounts.Player')),
                ('selection_doc', models.FileField(blank=True, null=True, upload_to='selection_answers/')),
                ('is_paid', models.BooleanField(default=False)),
                ('is_accepted', models.BooleanField(default=False)),
                ('is_participated', models.BooleanField(default=False)),
            ],
            bases=('accounts.player',),
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('player_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='accounts.Player')),
                ('group_name', models.CharField(blank=True, max_length=200)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('team_code', models.CharField(max_length=10)),
            ],
            bases=('accounts.player',),
        ),
    ]
